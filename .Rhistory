hist(Total.Innovations);qqnorm(Total.Innovations);qqline(Total.Innovations)
# ACF and PACF
windows()
par(mfrow=c(1,2))
acf(Total.Innovations);pacf(Total.Innovations)
Total.Res=resid(Total.Filter)
# Prediction Using Kalman Filter
Pred=append(TotCount.Train,rep(NA,85))
Pred=dlmFilter(Pred,TotalDLM)
length(Pred$f)
windows()
plot(TotCount.Pred[738:822],col='black',type='o')
lines(Pred$f[738:822],col='red',type='o')
mape=mean(abs((Raw_Count.df$TotRawCt[(train_len+1):822] - Pred$f[738:822]))/Raw_Count.df$TotRawCt[(train_len+1):822])*100
mape
# Local Level with Weekly Seasonality
buildDLM=function(psi){
mod=dlmModARMA(ar=psi[4])+dlmModSeas(frequency = 7)+dlmModReg(X=exo.dlm,addInt = F) # Fixed regression components
mod$V=exp(psi[1])
mod$W[1,1]=exp(psi[2])
mod$W[2,2]=exp(psi[3])
mod$W[8,8]=0
mod$W[9,9]=0
mod$W[10,10]=0
return(mod)
}
# Local Level with Weekly Seasonality
buildDLM=function(psi){
mod=dlmModARMA(ar=psi[4:5])+dlmModSeas(frequency = 7)+dlmModReg(X=exo.dlm,addInt = F) # Fixed regression components
mod$V=exp(psi[1])
mod$W[1,1]=exp(psi[2])
mod$W[2,2]=exp(psi[3])
mod$W[8,8]=0
mod$W[9,9]=0
mod$W[10,10]=0
return(mod)
}
TotalMLE=dlmMLE(TotCount.Train/100000,c(rep(0,3),0,0),build=buildDLM,hessian=T,control=list(trace = 1, REPORT=1,maxit = 250))
avarLog=solve(TotalMLE$hessian)
avar=diag(exp(TotalMLE$par)) %*% avarLog %*% diag(exp(TotalMLE$par))
abs(sqrt(diag(avar)))
exp(TotalMLE$par)
TotalDLM=buildDLM((TotalMLE$par))
Total.Filter=dlmFilter(TotCount.Train,TotalDLM)
Total.Smooth=dlmSmooth(TotCount.Train,TotalDLM)
Total.Res=resid(Total.Filter)
Total.Innovations=Total.Res$res
GG(TotalDLM)
# Local Level with Weekly Seasonality
buildDLM=function(psi){
mod=dlmModARMA(ar=psi[4],ma=psi[5])+dlmModSeas(frequency = 7)+dlmModReg(X=exo.dlm,addInt = F) # Fixed regression components
mod$V=exp(psi[1])
mod$W[1,1]=exp(psi[2])
mod$W[2,2]=exp(psi[3])
mod$W[8,8]=0
mod$W[9,9]=0
mod$W[10,10]=0
return(mod)
}
loc.lvl.weekly=dlmModARMA(ar=psi[4],ma=psi[5])+dlmModSeas(7)+dlmModReg(X=exo.dlm,addInt = F)
loc.lvl.weekly=dlmModARMA(ar=1,ma=-0.2)+dlmModSeas(7)+dlmModReg(X=exo.dlm,addInt = F)
loc.lvl.weekly$W
loc.lvl.weekly$V
loc.lvl.weekly$GG
?dlmModARMA
loc.lvl.weekly=dlmModARMA(ar=1,ma=-0.2)+dlmModSeas(7)+dlmModReg(X=exo.dlm,addInt = F)
loc.lvl.weekly$W
loc.lvl.weekly$V
loc.lvl.weekly$GG
buildDLM=function(psi){
mod=dlmModARMA(ar=psi[4],ma=psi[5])+dlmModSeas(frequency = 7)+dlmModReg(X=exo.dlm,addInt = F) # Fixed regression components
mod$V=exp(psi[1])
mod$W[1,1]=exp(psi[2])
mod$W[2,2]=exp(psi[3])
mod$W[8,8]=0
mod$W[9,9]=0
mod$W[10,10]=0
return(mod)
}
TotalMLE=dlmMLE(TotCount.Train/100000,c(rep(0,3),0,0),build=buildDLM,hessian=T,control=list(trace = 1, REPORT=1,maxit = 250))
avarLog=solve(TotalMLE$hessian)
avar=diag(exp(TotalMLE$par)) %*% avarLog %*% diag(exp(TotalMLE$par))
abs(sqrt(diag(avar)))
sqrt(abs(diag(avar)))
exp(TotalMLE$par)
TotalDLM=buildDLM((TotalMLE$par))
Total.Filter=dlmFilter(TotCount.Train,TotalDLM)
Total.Smooth=dlmSmooth(TotCount.Train,TotalDLM)
Total.Res=resid(Total.Filter)
Total.Innovations=Total.Res$res
GG(TotalDLM)
loc.lvl.weekly=dlmModARMA(ar=1)+dlmModSeas(7)+dlmModReg(X=exo.dlm,addInt = F)
mod=dlmModARMA(ar=psi[4])+dlmModSeas(frequency = 7)+dlmModReg(X=exo.dlm,addInt = F) # Fixed regression components
# Local Level with Weekly Seasonality
buildDLM=function(psi){
mod=dlmModARMA(ar=psi[4])+dlmModSeas(frequency = 7)+dlmModReg(X=exo.dlm,addInt = F) # Fixed regression components
mod$V=exp(psi[1])
mod$W[1,1]=exp(psi[2])
mod$W[2,2]=exp(psi[3])
mod$W[8,8]=0
mod$W[9,9]=0
mod$W[10,10]=0
return(mod)
}
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/DataSetup.R', echo=TRUE)
# Using the DLM Package #
library(dlm)
# Data set up
TotCount.Train=as.numeric(Raw_Count.df$TotRawCt[1:train_len])
Precip.Train=as.numeric(exog.df$Precip[1:train_len])
Holidays.Train=as.numeric(exog.df$Holidays[1:train_len])
Peak.Travel.Train=as.numeric(exog.df$PeakTrav[1:train_len])
train.df=cbind.data.frame(Precip.Train,Holidays.Train,Peak.Travel.Train)
#### Preciction Data Set
pred.seq=(train_len+1):length(Raw_Count.df$TotRawCt)
TotCount.Pred=as.numeric(Raw_Count.df$TotRawCt)
Precip.Pred=as.numeric(exog.df$Precip[pred.seq])
Holidays.Pred=as.numeric(exog.df$Holidays[pred.seq])
Peak.Travel.Pred=as.numeric(exog.df$PeakTrav[pred.seq])
pred.df=cbind.data.frame(Precip.Pred,Holidays.Pred,Peak.Travel.Pred)
trend=1:length(TotCount.Train)
# Exogenous Predictors
exo.dlm=cbind.data.frame("Precipitation"=exog.df$Precip,
"Holiday"=exog.df$Holidays,
"PeakTravel"=exog.df$Holidays)
# Local Level with Weekly Seasonality
buildDLM=function(psi){
mod=dlmModARMA(ar=psi[4])+dlmModSeas(frequency = 7)+dlmModReg(X=exo.dlm,addInt = F) # Fixed regression components
mod$V=exp(psi[1])
mod$W[1,1]=exp(psi[2])
mod$W[2,2]=exp(psi[3])
mod$W[8,8]=0
mod$W[9,9]=0
mod$W[10,10]=0
return(mod)
}
TotalMLE=dlmMLE(TotCount.Train/100000,c(rep(0,3),0),build=buildDLM,hessian=T,control=list(trace = 1, REPORT=1,maxit = 250))
avarLog=solve(TotalMLE$hessian)
avar=diag(exp(TotalMLE$par)) %*% avarLog %*% diag(exp(TotalMLE$par))
sqrt(abs(diag(avar)))
exp(TotalMLE$par)
TotalDLM=buildDLM((TotalMLE$par))
Total.Filter=dlmFilter(TotCount.Train,TotalDLM)
Total.Smooth=dlmSmooth(TotCount.Train,TotalDLM)
Total.Res=resid(Total.Filter)
Total.Innovations=Total.Res$res
GG(TotalDLM)
W(TotalDLM)
V(TotalDLM)
# Model Diagnostics
# Filtered Values vs Actual
windows()
plot(TotCount.Train,col='black',type='l')
lines(Total.Filter$f,col='red',type='l',lty=2)
# Residuals Diagnostics
windows()
par(mfrow=c(1,2))
hist(Total.Innovations);qqnorm(Total.Innovations);qqline(Total.Innovations)
# ACF and PACF
windows()
par(mfrow=c(1,2))
acf(Total.Innovations);pacf(Total.Innovations)
# Prediction Using Kalman Filter
Pred=append(TotCount.Train,rep(NA,85))
Pred=dlmFilter(Pred,TotalDLM)
length(Pred$f)
windows()
plot(TotCount.Pred[738:822],col='black',type='o')
lines(Pred$f[738:822],col='red',type='o')
mape=mean(abs((Raw_Count.df$TotRawCt[(train_len+1):822] - Pred$f[738:822]))/Raw_Count.df$TotRawCt[(train_len+1):822])*100
mape
V(TotalDLM)
W(TotalDLM)
sqrt(2.927229)
# Local Level with Weekly Seasonality
buildDLM=function(psi){
mod=dlmModPoly(1)+dlmModSeas(frequency = 7)+dlmModReg(X=exo.dlm,addInt = F) # Fixed regression components
mod$V=exp(psi[1])
mod$W[1,1]=exp(psi[2])
mod$W[2,2]=exp(psi[3])
mod$W[8,8]=0
mod$W[9,9]=0
mod$W[10,10]=0
return(mod)
}
TotalMLE=dlmMLE(TotCount.Train/100000,c(rep(2,3)),build=buildDLM,hessian=T,control=list(trace = 1, REPORT=1,maxit = 250))
avarLog=solve(TotalMLE$hessian)
avar=diag(exp(TotalMLE$par)) %*% avarLog %*% diag(exp(TotalMLE$par))
sqrt(abs(diag(avar)))
exp(TotalMLE$par)
TotalDLM=buildDLM((TotalMLE$par))
Total.Filter=dlmFilter(TotCount.Train,TotalDLM)
Total.Smooth=dlmSmooth(TotCount.Train,TotalDLM)
Total.Res=resid(Total.Filter)
Total.Innovations=Total.Res$res
GG(TotalDLM)
W(TotalDLM)
V(TotalDLM)
# Model Diagnostics
# Filtered Values vs Actual
windows()
plot(TotCount.Train,col='black',type='l')
lines(Total.Filter$f,col='red',type='l',lty=2)
# Residuals Diagnostics
windows()
par(mfrow=c(1,2))
hist(Total.Innovations);qqnorm(Total.Innovations);qqline(Total.Innovations)
# ACF and PACF
windows()
par(mfrow=c(1,2))
acf(Total.Innovations);pacf(Total.Innovations)
Total.Predict=append(TotCount.Train,rep(NA,85))
Pred=dlmFilter(Total.Predict,TotalDLM)
length(Total.Predict$f)
# Prediction Using Kalman Filter
Total.Predict=append(TotCount.Train,rep(NA,85))
Total.Predict=dlmFilter(Pred,TotalDLM)
# Prediction Using Kalman Filter
Pred=append(TotCount.Train,rep(NA,85))
Total.Predict=dlmFilter(Pred,TotalDLM)
length(Total.Predict$f)
windows()
plot(TotCount.Pred[738:822],col='black',type='o')
lines(Total.Predict$f[738:822],col='red',type='o')
mape=mean(abs((Raw_Count.df$TotRawCt[(train_len+1):822] - Total.Predict$f[738:822]))/Raw_Count.df$TotRawCt[(train_len+1):822])*100
mape
### Predictions from KFAS
TNC.Count.Pred=xts(Prop.PointFcst.df[,1]*Total.Predict$f,order.by=Full.Dates[738:822],by='days')
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/DataSetup.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/EDA.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/VARX Model.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/FittedAndResiduals.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/ComponentForecasting.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
### Predictions from DLM library
TNC.Count.Pred=xts(Prop.PointFcst.df[,1]*Total.Predict$f,order.by=Full.Dates[738:822],by='days')
Taxi.Count.Pred=xts(Prop.PointFcst.df[,2]*Total.Predict$f,order.by=Full.Dates[738:822],by='days')
Citi.Count.Pred=xts(Prop.PointFcst.df[,3]*Total.Predict$f,order.by=Full.Dates[738:822],by='days')
Subway.Count.Pred=xts(Prop.PointFcst.df[,4]*Total.Predict$f,order.by=Full.Dates[738:822],by='days')
### Predictions from DLM library
TNC.Count.Pred=xts(Prop.PointFcst.df[,1]*Total.Predict$f[738:822],order.by=Full.Dates[738:822],by='days')
Taxi.Count.Pred=xts(Prop.PointFcst.df[,2]*Total.Predict$f[738:822],order.by=Full.Dates[738:822],by='days')
Citi.Count.Pred=xts(Prop.PointFcst.df[,3]*Total.Predict$f[738:822],order.by=Full.Dates[738:822],by='days')
Subway.Count.Pred=xts(Prop.PointFcst.df[,4]*Total.Predict$f[738:822],order.by=Full.Dates[738:822],by='days')
### Forecast Error ###
MAE.Fcst.Ct=MAE(cbind(TNC.Count.Pred,Taxi.Count.Pred,Citi.Count.Pred,Subway.Count.Pred),Raw_Count.df[738:822,1:4])
MAPE.Fcst.Ct=MAPE(cbind(TNC.Count.Pred,Taxi.Count.Pred,Citi.Count.Pred,Subway.Count.Pred),Raw_Count.df[738:822,1:4])
MAE.Fcst.Ct=colMeans(MAE.Fcst.Ct);MAE.Fcst.Ct
MAPE.Fcst.Ct=colMeans(MAPE.Fcst.Ct);
#rbind(MAPE.Fcst.Ct,mape.total.kfas)
MAPE.Fcst.Ct
mape.petris=mean(abs((Raw_Count.df$TotRawCt[(train_len+1):822] - Total.Predict$f[738:822]))/Raw_Count.df$TotRawCt[(train_len+1):822])*100
mape.petrs
mape.petris
TNC.Count.Forecast.Plot=plot.xts(Raw_Count.df$TNCCt[738:822],col = 'black',type = 'o',pch=3,lty = 3,
ylim=c(min(Raw_Count.df$TNCCt[738:822]),max(TNC.Count.Pred+10000)),
main = "TNC Count Forecasts" ,yaxis.right = F,grid.ticks.on = T,grid.ticks.lty = 3)
TNC.Count.Forecast.Plot=plot.xts(Raw_Count.df$TNCCt[738:822],col = 'black',type = 'o',pch=3,lty = 3,
ylim=c(min(Raw_Count.df$TNCCt[738:822]),max(TNC.Count.Pred+10000)),
main = "TNC Count Forecasts" ,yaxis.right = F,grid.ticks.on = T,grid.ticks.lty = 3)
TNC.Count.Forecast.Plot=lines(TNC.Count.Pred,col = 'blue',type = 'o',pch=16,lty = 1)
TNC.Count.Forecast.Plot=addLegend(legend.loc = 'topleft',legend.names = c("Observed","Forecast"),
col = c('black','blue'),lty=c(3,1),pch=c(3,16))
windows()
TNC.Count.Forecast.Plot
### Taxi
dev.off
dev.off()
Taxi.Count.Forecast.Plot=plot.xts(Raw_Count.df$TaxiCt[738:822],col = 'black',type = 'o',pch=3,lty = 3,
ylim=c(min(Taxi.Count.Pred),max(Taxi.Count.Pred)+10000),
yaxis.right = F,grid.ticks.on = T,grid.ticks.lty = 3,
main = "Taxi Count Forecasts")
Taxi.Count.Forecast.Plot=lines(Taxi.Count.Pred,col = 'blue',type = 'o',pch=16,lty = 1)
Taxi.Count.Forecast.Plot=addLegend(legend.loc = 'topleft',legend.names = c("Observed","Forecast"),
col = c('black','blue'),lty=c(3,1),pch=c(3,16))
Taxi.Count.Forecast.Plot
Citibike.Count.Forecast.Plot=plot.xts(Raw_Count.df$CitiCt[738:822],col = 'black',type = 'o',pch=3,lty = 3,
ylim=c(min(Raw_Count.df$CitiCt[738:822])-5000,max(Raw_Count.df$CitiCt[738:822]+10000)),
main = "Citibike Count Forecasts",yaxis.right = F,grid.ticks.on = T,grid.ticks.lty = 3)
Citibike.Count.Forecast.Plot=lines(Citi.Count.Pred,col = 'blue',type = 'o',pch=16,lty = 1)
Citibike.Count.Forecast.Plot=addLegend(legend.loc = 'topleft',legend.names = c("Observed","Forecast"),
col = c('black','blue'),lty=c(3,1),pch=c(3,16))
Citibike.Count.Forecast.Plot
### Subway
Subway.Count.Forecast.Plot=plot.xts(Raw_Count.df$SubwayCt[738:822],col = 'black',type = 'o',pch=3,lty = 3,
ylim=c(min(Raw_Count.df$TNCCt[738:822]),max(Subway.Count.Pred+500000)),
main = "Subway Count Forecasts",yaxis.right = F,grid.ticks.on = T,grid.ticks.lty = 3)
Subway.Count.Forecast.Plot=lines(Subway.Count.Pred,col = 'blue',type = 'o',pch=16,lty = 1)
Subway.Count.Forecast.Plot=addLegend(legend.loc = 'bottomleft',legend.names = c("Observed","Forecast"),
col = c('black','blue'),lty=c(3,1),pch=c(3,16))
Subway.Count.Forecast.Plot
windows()
plot(TotCount.Pred[738:822],col='black',type='o')
lines(Total.Predict$f[738:822],col='red',type='o')
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/DataSetup.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/EDA.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/VARX Model.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/FittedAndResiduals.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/ComponentForecasting.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
mape.petris=mean(abs((Raw_Count.df$TotRawCt[(train_len+1):822] - Total.Predict$f[738:822]))/Raw_Count.df$TotRawCt[(train_len+1):822])*100
mape.petris
GG(TotalDLM)
W(TotalDLM)
V(TotalDLM)
W(TotalDLM)
V(TotalDLM)
W(TotalDLM)
V(TotalDLM)
GG(TotalDLM)
sqrt(abs(diag(avar)))
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/CountForecasting.R', echo=TRUE)
MAE.Fcst.Ct
MAPE.Fcst.Ct
mape.petris
TotalMLE$convergence
TotalMLE$value
# ACF and PACF
windows()
par(mfrow=c(1,2))
acf(Total.Innovations);pacf(Total.Innovations)
windows()
plot(TotCount.Pred[738:822],col='black',type='o')
lines(Total.Predict$f[738:822],col='red',type='o')
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/DataSetup.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/EDA.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/VARX Model.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/FittedAndResiduals.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/ComponentForecasting.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/DLM-KFAS version.R', echo=TRUE)
Total.Output$model
sqrt(exp(TotMLE$optim.out$par))
sqrt(abs(diag(solve(TotMLE$optim.out$hessian))))
((Total.Output$F))[737]
TotMLE$model$H
TotMLE$model$Q
print(Total.Output)
sqrt(exp(TotMLE$optim.out$par))
(exp(TotMLE$optim.out$par))
sqrt(abs(diag(solve(TotMLE$optim.out$hessian))))
sqrt(exp(abs(diag(solve(TotMLE$optim.out$hessian)))))
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/CountForecasting.R', echo=TRUE)
MAE.Fcst.Ct
MAPE.Fcst.Ct
mape.total.kfas
1-12/20
12/20
12-20
/20
(12-20)/20
?KFAS
(exp(TotMLE$optim.out$par))
avarLog=solve(TotMLE$hessian)
avarLog=solve(TotMLE$optim.out$hessian)
avar=diag(exp(TotMLE$optim.out$par)) %*% avarLog %*% diag(exp(TotMLE$optim.out$par))
sqrt(abs(diag(avar)))
signif(sqrt(abs(diag(avar))),3)
(exp(TotMLE$optim.out$par))
signif((exp(TotMLE$optim.out$par)))
signif((exp(TotMLE$optim.out$par)),3)
signif(sqrt(abs(diag(avar))),3)
signif((exp(TotMLE$optim.out$par)),3)
signif(sqrt(abs(diag(avar))),3)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/DataSetup.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/EDA.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/VARX Model.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/FittedAndResiduals.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/ComponentForecasting.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/CountForecasting.R', echo=TRUE)
MAE.Fcst.Ct
MAPE.Fcst.Ct
mean(MAE.Fcst.Ct)
MAE.Fcst.Ct
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/DataSetup.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/EDA.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/VARX Model.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/FittedAndResiduals.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/ComponentForecasting.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
# ACF and PACF
windows()
par(mfrow=c(1,2))
acf(Total.Innovations);pacf(Total.Innovations)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/CountForecasting.R', echo=TRUE)
MAE.Fcst.Ct
MAPE.Fcst.Ct
GG(TotalDLM)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/DataSetup.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/EDA.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/VARX Model.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/DataSetup.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/EDA.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/VARX Model.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/FittedAndResiduals.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
hist(TotCount.Train)
hist(log(TotCount.Train))
hist((TotCount.Train/100000)^(3))
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
TotalMLE$value
exp(TotalMLE$par)
avarLog=solve(TotalMLE$hessian)
TotalMLE$hessian
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
TotalMLE$hessian
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
TotalMLE$hessian
# Local Level with Weekly Seasonality
buildDLM=function(psi){
mod=dlmModPoly(1)+dlmModSeas(frequency = 7)+dlmModReg(X=exo.dlm,addInt = F) # Fixed regression components
mod$V=exp(psi[1])
mod$W[1,1]=exp(psi[2])
mod$W[2,2]=exp(psi[3])
mod$W[8,8]=0.01
mod$W[9,9]=0.01
mod$W[10,10]=0.01
innov=dlmModARMA(ar=psi[4],sigma2 = exp(psi[5]))
return(mod+innov)
}
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/ComponentForecasting.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/CountForecasting.R', echo=TRUE)
MAE.Fcst.Ct
MAPE.Fcst.Ct
mean(MAPE.Fcst.Ct)
mean(MAE.Fcst.Ct)
### Forecast Plots ###
### TNC
TNC.Count.Forecast.Plot=plot.xts(Raw_Count.df$TNCCt[738:822],col = 'black',type = 'o',pch=3,lty = 3,
ylim=c(min(Raw_Count.df$TNCCt[738:822]),max(TNC.Count.Pred+10000)),
main = "TNC Count Forecasts" ,yaxis.right = F,grid.ticks.on = T,grid.ticks.lty = 3)
TNC.Count.Forecast.Plot=lines(TNC.Count.Pred,col = 'blue',type = 'o',pch=16,lty = 1)
TNC.Count.Forecast.Plot=addLegend(legend.loc = 'topleft',legend.names = c("Observed","Forecast"),
col = c('black','blue'),lty=c(3,1),pch=c(3,16))
TNC.Count.Forecast.Plot
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/DataSetup.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/EDA.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/VARX Model.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/FittedAndResiduals.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/ComponentForecasting.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/DLM-KFAS version.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/CountForecasting.R', echo=TRUE)
Taxi.Count.Forecast.Plot
dev.off()
Taxi.Count.Forecast.Plot
Taxi.Count.Forecast.Plot=addLegend(legend.loc = 'topright',legend.names = c("Observed","Forecast"),
col = c('black','blue'),lty=c(3,1),pch=c(3,16))
Taxi.Count.Forecast.Plot
### Taxi
Taxi.Count.Forecast.Plot=plot.xts(Raw_Count.df$TaxiCt[738:822],col = 'black',type = 'o',pch=3,lty = 3,
ylim=c(min(Taxi.Count.Pred),max(Taxi.Count.Pred)+10000),
yaxis.right = F,grid.ticks.on = T,grid.ticks.lty = 3,
main = "Taxi Count Forecasts")
Taxi.Count.Forecast.Plot=lines(Taxi.Count.Pred,col = 'blue',type = 'o',pch=16,lty = 1)
Taxi.Count.Forecast.Plot=addLegend(legend.loc = 'topright',legend.names = c("Observed","Forecast"),
col = c('black','blue'),lty=c(3,1),pch=c(3,16))
Taxi.Count.Forecast.Plot
TNC.Count.Forecast.Plot
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/CountForecasting.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/CountForecasting.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/CountForecasting.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/CountForecasting.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/DataSetup.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/EDA.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/VARX Model.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/FittedAndResiduals.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/ComponentForecasting.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/DLM-KFAS version.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
loc.lvl.weekly=dlmModARMA(ar=1)+dlmModSeas(7)+dlmModReg(X=exo.dlm,addInt = F)
#loc.lvl.weekly$W
#loc.lvl.weekly$V
#loc.lvl.weekly$GG
loc.lvl.weekly$GG
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
TotalMLE$value
exp(TotalMLE$par)
TotalMLE$par[2]
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
TotalMLE$par
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/TotalCount-petris.R', echo=TRUE)
# Residuals Diagnostics
windows()
par(mfrow=c(1,2))
hist(Total.Innovations);qqnorm(Total.Innovations);qqline(Total.Innovations)
# ACF and PACF
windows()
par(mfrow=c(1,2))
acf(Total.Innovations);pacf(Total.Innovations)
windows()
par(mfrow=c(1,2))
acf(Total.Innovations);pacf(Total.Innovations)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/DataSetup.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/EDA.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/VARX Model.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/FittedAndResiduals.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/ComponentForecasting.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/DLM-KFAS version.R', echo=TRUE)
source('D:/Time Series/RideShare Models/Code and Markdown File/ALR Paper Code/New Code/CountForecasting.R', echo=TRUE)
